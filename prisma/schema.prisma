// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Roles within the platform
enum Role {
  PLANNER
  ASSISTANT
  COUPLE
  GUEST
}

/// Reservation/payment status
enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
  DRAFT
  SIGNED
}

/// Contract types
enum ContractType {
  PHOTOGRAPHY
  HOTEL
  VENUE
  OTHER
}

model Company {
  id        String    @id @default(cuid())
  name      String
  planners  User[]
  weddings  Wedding[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  role         Role         @default(PLANNER)
  passwordHash String?
  companyId    String?
  company      Company?     @relation(fields: [companyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  createdCodes InviteCode[]
  accounts     Account[]
  sessions     Session[]
}

model Wedding {
  id         String         @id @default(cuid())
  name       String
  coupleName String
  date       DateTime?
  location   String?
  slug       String         @unique
  status     Status         @default(DRAFT)
  siteTheme  Json?
  companyId  String
  company    Company        @relation(fields: [companyId], references: [id])
  guests     Guest[]
  codes      InviteCode[]
  hotels     WeddingHotel[]
  contracts  Contract[]
  albums     Album[]
  tables     SeatingTable[]
  socials    SocialPlan[]
  messages   Message[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Guest {
  id           String             @id @default(cuid())
  name         String
  email        String?
  phone        String?
  status       Status             @default(PENDING)
  plusOnes     Int                @default(0)
  children     Int                @default(0)
  weddingId    String
  wedding      Wedding            @relation(fields: [weddingId], references: [id])
  codeId       String?            @unique
  code         InviteCode?        @relation(name: "GuestCode", fields: [codeId], references: [id])
  reservations HotelReservation[]
  flights      FlightBooking[]
  payments     Payment[]
  seat         SeatAssignment?
  messages     Message[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model InviteCode {
  id          String    @id @default(cuid())
  code        String    @unique
  weddingId   String
  wedding     Wedding   @relation(fields: [weddingId], references: [id])
  createdById String?
  createdBy   User?     @relation(fields: [createdById], references: [id])
  expiresAt   DateTime?
  guest       Guest?    @relation(name: "GuestCode")
  createdAt   DateTime  @default(now())
}

model Hotel {
  id           String             @id @default(cuid())
  name         String
  location     String?
  rating       Float?
  rooms        RoomType[]
  reservations HotelReservation[]
  weddings     WeddingHotel[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model WeddingHotel {
  id        String  @id @default(cuid())
  weddingId String
  wedding   Wedding @relation(fields: [weddingId], references: [id])
  hotelId   String
  hotel     Hotel   @relation(fields: [hotelId], references: [id])
  notes     String?
}

model RoomType {
  id           String             @id @default(cuid())
  hotelId      String
  hotel        Hotel              @relation(fields: [hotelId], references: [id])
  name         String
  capacity     Int                @default(2)
  basePrice    Int
  reservations HotelReservation[]
}

model HotelReservation {
  id          String    @id @default(cuid())
  guestId     String
  guest       Guest     @relation(fields: [guestId], references: [id])
  hotelId     String
  hotel       Hotel     @relation(fields: [hotelId], references: [id])
  roomTypeId  String
  roomType    RoomType  @relation(fields: [roomTypeId], references: [id])
  checkIn     DateTime
  checkOut    DateTime
  guestsCount Int       @default(1)
  children    Int       @default(0)
  price       Int
  status      Status    @default(PENDING)
  payments    Payment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model FlightBooking {
  id        String    @id @default(cuid())
  guestId   String
  guest     Guest     @relation(fields: [guestId], references: [id])
  from      String
  to        String
  departAt  DateTime
  returnAt  DateTime?
  airline   String?
  price     Int
  status    Status    @default(PENDING)
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Contract {
  id        String       @id @default(cuid())
  weddingId String
  wedding   Wedding      @relation(fields: [weddingId], references: [id])
  type      ContractType @default(OTHER)
  title     String
  content   String
  total     Int          @default(0)
  status    Status       @default(DRAFT)
  signedBy  String?
  payments  Payment[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Payment {
  id              String            @id @default(cuid())
  amount          Int
  method          String?
  status          Status            @default(PENDING)
  contractId      String?
  contract        Contract?         @relation(fields: [contractId], references: [id])
  reservationId   String?
  reservation     HotelReservation? @relation(fields: [reservationId], references: [id])
  flightBookingId String?
  flightBooking   FlightBooking?    @relation(fields: [flightBookingId], references: [id])
  guestId         String?
  guest           Guest?            @relation(fields: [guestId], references: [id])
  createdAt       DateTime          @default(now())
}

model Album {
  id        String   @id @default(cuid())
  weddingId String
  wedding   Wedding  @relation(fields: [weddingId], references: [id])
  title     String
  photos    Photo[]
  createdAt DateTime @default(now())
}

model Photo {
  id      String  @id @default(cuid())
  albumId String
  album   Album   @relation(fields: [albumId], references: [id])
  url     String
  caption String?
}

model SeatingTable {
  id        String           @id @default(cuid())
  weddingId String
  wedding   Wedding          @relation(fields: [weddingId], references: [id])
  name      String
  capacity  Int              @default(8)
  seats     SeatAssignment[]
}

model SeatAssignment {
  id      String       @id @default(cuid())
  tableId String
  table   SeatingTable @relation(fields: [tableId], references: [id])
  guestId String       @unique
  guest   Guest        @relation(fields: [guestId], references: [id])
  seatNo  Int
}

model SocialPlan {
  id          String    @id @default(cuid())
  weddingId   String
  wedding     Wedding   @relation(fields: [weddingId], references: [id])
  platform    String
  content     String
  scheduledAt DateTime?
  status      Status    @default(DRAFT)
}

model Template {
  id        String  @id @default(cuid())
  type      String
  name      String
  data      Json
  createdBy String?
}

model Message {
  id        String   @id @default(cuid())
  weddingId String?
  wedding   Wedding? @relation(fields: [weddingId], references: [id])
  guestId   String?
  guest     Guest?   @relation(fields: [guestId], references: [id])
  role      String
  content   String
  createdAt DateTime @default(now())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
